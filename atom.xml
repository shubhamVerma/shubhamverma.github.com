<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Geek's Life]]></title>
  <link href="http://shubhamverma.github.io/atom.xml" rel="self"/>
  <link href="http://shubhamverma.github.io/"/>
  <updated>2014-11-03T13:04:02+00:00</updated>
  <id>http://shubhamverma.github.io/</id>
  <author>
    <name><![CDATA[Shubham Verma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking Down a Python One Liner]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/11/03/breaking-down-a-python-one-liner/"/>
    <updated>2014-11-03T12:47:46+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/11/03/breaking-down-a-python-one-liner</id>
    <content type="html"><![CDATA[<p>Recently a friend of mine asked me to help her with a <a href="https://www.python.org/">Python</a> script she was working on. The script had to process a log file. So the problem was that the script had to identify the most recently modified log file among the list of log files present in the current working directory. And another issue was that there might be some other files and directories present in the working directory of the script.</p>

<p>So I came up with this one liner to find out the most recently updated log file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;log&#39;</span><span class="p">)],</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">a</span><span class="p">))[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know it looks scary, and long enough to not fit on a single line, but it shows the <a href="http://stackoverflow.com/questions/638881/what-does-expressive-mean-when-referring-to-programming-languages">expressive nature</a> of Python. That&rsquo;s one of the reasons I decided to learn it and I ended up liking it!</p>

<p>So lets break it down.</p>

<p>First we need to get the list of all files in the current working directory. The built-in <code>os</code> module in Python provides a utility function <code>listdir</code> which can used as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That returns a <strong>list</strong> - just another name for an array in Python lingo, containing the names of all files and directories in the current directory of the script. We do need to import the os module for that. So the following must be added at the top in the script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span></code></pre></td></tr></table></div></figure>


<p>A special thing about log files was that their name starts with <strong>log</strong>. So now we just need to filter out the log files. Using <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a> in Python makes it a lot easier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">logFiles</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;log&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give us just the list of log files in the current working directory. Sweet.</p>

<p>To find out the most recently modified file, we need to know the <strong>last modified time</strong> of each file and then sort them according to it. The <code>path</code> sub-module in <code>os</code> module contains a function <code>getmtime</code> that returns the last modified time of the file. It can be used as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For sorting we need to use the <code>sorted</code> function. Its syntax is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument <code>iterable</code> is the list that we want to sort. The second argument <code>key</code> has to be a function which defines the criteria for sorting.</p>

<p>Functions can be defined in two ways in Python. The normal syntax is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">addOne</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also define an anonymous function known as <a href="http://stackoverflow.com/questions/890128/python-lambda-why">lambda</a> in Python land. So the above function can be written as a lambda:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">add</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use the lambda synatx to define the <code>key</code> for the <code>sorted</code> function.</p>

<p>Our <code>key</code> function would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">keyFn</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return the last modified time for the filename represnted by the variable <code>a</code>.</p>

<p>So far, we have this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">logFiles</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;log&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">keyFn</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">logFilesSortedByLastModifiedTime</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">logFiles</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">keyFn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sorted list that is being returned here is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="s">&#39;least_recently_modified&#39;</span><span class="p">,</span><span class="o">.....</span><span class="p">,</span><span class="s">&#39;most_recently_modified&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want the last element of the list. In Python, we can use negative indexes with list. So an index of -1 refers to the last element of the list.</p>

<p>Now we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">logFiles</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;log&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">keyFn</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">logFilesSortedByLastModifiedTime</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">logFiles</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">keyFn</span><span class="p">)</span>
</span><span class='line'><span class="n">mostRecentlyModifiedLogFile</span> <span class="o">=</span> <span class="n">logFilesSortedByLastModifiedTime</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eliminating the variables, we can write the above four lines in just one line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;log&#39;</span><span class="p">)],</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">getmtime</span><span class="p">(</span><span class="n">a</span><span class="p">))[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope that was fun! Happy Coding :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey With Programming Languages - Part 3]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/11/03/journey-with-programming-languages-part-3/"/>
    <updated>2014-11-03T12:42:46+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/11/03/journey-with-programming-languages-part-3</id>
    <content type="html"><![CDATA[<h3>Diploma - B. Tech - Current</h3>

<p>Been a long time since the last post.</p>

<p>So, the next stop in my journey was the <strong>Web land</strong>. There was <a href="http://en.wikipedia.org/wiki/HTML">HTML</a>, <a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>, and <a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a>. This is where I learned the <strong>principle of separating the actual content from its presentation and behaviour</strong>. Now this principle is very general, hence is not only applicable to the Web land, but also to <em>(insert your favorite development platform here)</em> which basically includes some kind of <a href="http://en.wikipedia.org/wiki/User_Interface">User Interface</a>. It can also be considered as a special case of the <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">Separation of Concerns</a> principle. I didn&rsquo;t touch much on the <strong>JavaScript</strong> as I was unware of its real power!</p>

<p>Then I got interested in <strong>Game Development</strong> (O yeah!). I tried many approaches including <a href="http://en.wikipedia.org/wiki/Allegro_%28software%29">Allegro</a>, <a href="http://en.wikipedia.org/wiki/GameMaker:_Studio">Game Maker</a> etc. and finally ended up using <a href="http://en.wikipedia.org/wiki/Blitz_BASIC">Blitz BASIC</a>. Its just a derivative of the original <a href="http://en.wikipedia.org/wiki/BASIC">BASIC</a> along with some specific features for game development such as <strong>graphics, input</strong> and <strong>audio handling</strong> etc. The syntax was easy and the approach was pretty <a href="http://en.wikipedia.org/wiki/Rapid_application_development">RAD</a>. I developed a simple <strong>vertical scrolling shooter</strong> with help of my awesome younger brother (who is way more creative than me!). We together did some game UI elements with <a href="http://en.wikipedia.org/wiki/Adobe_Photoshop">Photoshop</a>.</p>

<p>I designed the <strong>ship</strong> for the game myself with the <a href="http://www.aseprite.org/">Allegro Sprite Editor</a>. It was a 32x32 <strong>bmp</strong>. For the rest of the sprites and game music, I searched the web. <strong>The game lagged as the number of asteroids increased, due to my inefficient algorithm, as it was my first attempt on building a complete game</strong>. Somehow I managed to finish it. It was a fun experience.</p>

<p>The next language was the cousin of the previous one, <a href="http://en.wikipedia.org/wiki/Visual_Basic">Visual Basic</a>. I didn&rsquo;t like it much and was not convinced by the whole <strong>drag and drop idea for developing user-interfaces</strong>. It might have been a boon in early times, but for me, <strong>it seemed less programmatic</strong>. I just did for the sake of my curriculum.</p>

<p>As time went by, my diploma finished and I came to <strong>Chennai</strong> for the B. Tech. in Computer Science.</p>

<p><a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29">Python</a> seemed to be very popular those days on the web. I looked up for some examples and decided to give it a shot. <strong>I loved it!</strong> It was <strong>fun</strong>, <strong>easy to learn</strong> and <strong>understand</strong>, had <strong>cool in-built data structures</strong>. The syntax was plain and simple, just like English. I found it very useful for <strong>quick tasks</strong> and <strong>programming competitions</strong>. I used it for solving problems from websites like <a href="https://projecteuler.net/">Project Euler</a>, <a href="http://codeeval.com">CodeEval</a>, <a href="www.spoj.pl">SPOJ</a> etc. My solutions to some of the problems from Project Euler and CodeEval can be found on my <a href="https://github.com/shubhamVerma">Github</a>.</p>

<p><strong>Though I loved Python, I couldn&rsquo;t decided whether I wanted to pursue my careeer in it</strong>. I didn&rsquo;t pursue the advanced concepts but had learnt enough for trivial problem solving.</p>

<p>My current favorite is JavaScript. It is the language of Web, and Web is the Future. So JavaScript is the language of future! To quote <a href="http://www.crockford.com/">Douglas Crockford</a>, the great JavaScript wizard:</p>

<blockquote><p>The World&rsquo;s Most Misunderstood Programming Language Has Become the World&rsquo;s Most Popular Programming Language</p></blockquote>

<p>and yes, he is referring to <a href="http://javascript.crockford.com/popular.html">JavaScript</a>. I am very <strong>comfortable with the syntax</strong> as coming from a <strong>C</strong> background and I appreciate its <strong>dynamic</strong> and <strong>functional</strong> nature as I was already exposed to those concepts through <strong>Python</strong>. I am impressed by the recent developments in the JavaScript ecosystem, especially <a href="http://nodejs.org/">Node.js</a>, and the rise of <a href="http://www.infragistics.com/community/blogs/nanil/archive/2013/04/01/exploring-javascript-mv-frameworks-part-1-hello-backbonejs.aspx">front-end MV* frameworks</a>. Though <strong>it has its <a href="http://darkhelmet.github.io/javascript-the-bad-parts/#/title">quirks</a></strong>, I have planned to take it very seriously and pursue it to be a <strong>full stack JavaScript developer</strong>. I am also looking forward to learn some <strong>un-conventional but exciting!</strong> technologies like <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://redis.io/">Redis</a> and the list goes on.</p>

<p>By now, you might have concluded that <strong>I am a language geek!</strong> For people out there planning to go on a similar adventure, I would like to say that, <strong>try to focus on problem solving rather than getting lost in the syntax details</strong>. The syntax will come naturally once you learn the basics. I wish you good luck for  your programmatic journey. Just don&rsquo;t forget to have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey With Programming Languages - Part 2]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/02/20/journey-with-programming-languages-part-2/"/>
    <updated>2014-02-20T12:34:53+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/02/20/journey-with-programming-languages-part-2</id>
    <content type="html"><![CDATA[<h3>The Diploma</h3>

<p><a href="http://en.wikipedia.org/wiki/C_language">C</a> was my first friend in diploma. It was a fresh beginning from the basics of programming. The books I referred at that time were <strong>Let Us C</strong>, <strong>How To Program - C Edition</strong>. C is an important language when it comes to both programming and understanding how low level stuff, like memory, works, as most of the things has to be taken care by the programmer himself. I was scared by <strong>pointers</strong> initially, but gradually overcame by trial and error method (what most programmers often do). I used Turbo C, but switched to <a href="http://www.bloodshed.net/devcpp.html">Dev-C++</a>. On the way I also tried <a href="http://www.codeblocks.org/">Code Blocks</a>.</p>

<p>In the beginning, it gets bit difficult to decide which is the <strong>appropriate tool for the job</strong>, but the ultimate choice is what suits you the best.</p>

<p>I learned about <strong>random numbers</strong> and created fun games for number guessing etc. I am glad that I learnt C, as it helped me in building a <strong>good foundation and a sound programming perspective</strong>.</p>

<p>Then I came across <a href="http://en.wikipedia.org/wiki/C%2B%2B">C++</a>. This time I read about OOPs properly. It felt very similar to C and later I realized that it was a superset of C. The new stuff was <strong>classes</strong>, <strong>objects</strong>, <strong>templates</strong> etc. I didn&rsquo;t look much into the <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">STL</a> (which I should have done!), but I liked the concept of templates, as they were great for <strong>abstraction</strong> and <strong>generalization</strong> of code. The books that I referred to for C++ were <strong>C++ for Artists</strong>, <strong>How To Program - C++ Edition</strong>, and <strong>Thinking in C++</strong>.</p>

<p>I just love abstraction. <strong>Learning to think abstractly also leads to a better life</strong> (as it is all about ignoring unnecessary stuff).</p>

<p>Next one was <a href="http://en.wikipedia.org/wiki/SQL">SQL</a>. It is actually more of a <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> rather than a programming language. And that means you only need to specify <strong>what you want instead of how you want</strong>. The <strong>query engine</strong> handles all that complex stuff. It is easy to learn but it also got complicated with stuff like <strong>database specific implementations</strong> of SQL, <strong>sub-queries</strong> etc.</p>

<p>SQL is relevant for <a href="http://en.wikipedia.org/wiki/RDBMS">RDBMS</a>. I was also introduced to <a href="http://en.wikipedia.org/wiki/Entity_relationship">Entity-Relationship model</a> along with that. It is a nice and effective tool for <strong>high level design of the database</strong>, again providing <strong>abstraction</strong>. For some hands-on SQL, I preferred to use <a href="http://en.wikipedia.org/wiki/SQLite">SQLite</a>, as it didn&rsquo;t need a server and used simple files as the database. For executing queries and connecting to the database, I used <a href="http://www.softpedia.com/get/Internet/Servers/Database-Utils/Database-NET.shtml">Database .NET</a>. Its a freeware and fine for practicing.</p>

<p>To be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey With Programming Languages - Part 1]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/01/24/journey-with-programming-languages-part-1/"/>
    <updated>2014-01-24T12:27:24+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/01/24/journey-with-programming-languages-part-1</id>
    <content type="html"><![CDATA[<h3>The School</h3>

<p>I first saw a PC at a relative’s house, on which I just played <strong>NES</strong> ( the Nintendo Entertainment System ) like games.</p>

<p>My first PC was Intel Pentium III, 800 MHz CPU, 256 MB RAM, but it was good enough to play the original <strong>GTA Vice City</strong>.</p>

<p>My first encounter with programming was with <a href="http://en.wikipedia.org/wiki/Logo_%28programming_language%29">MS Logo</a> as part of my school curriculum. I can’t exactly remember which grade I was in at that time. It used simple commands to draw lines, shapes and patterns. It was an awesome first time experience. I used to try various commands trying to build spider-web like patterns.</p>

<p>Then I got introduced to <a href="http://en.wikipedia.org/wiki/Html">HTML</a>, the language of Web, as it was also a part of my school curriculum. It gave me a sense of working with something that’s really being used heavily out there. It was fun to make awfully looking colorful pages and link them with each other.</p>

<p>In my final grade, we had <a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29">Java</a>. It felt a lot more related to programming than HTML (I think everybody agrees with that). With that came stuff like <strong>Object Oriented Programming</strong>, classes, object etc. I was able to understand the basics of programming like variables, types, conditionals etc. but was not pretty clear with the whole Object-Oriented stuff and why things were supposed to be done in that way. I learned the definitions but failed to grasp the true meaning, may be due to my small age and lack of abstract thinking.</p>

<p>That was the time I decided that this is the thing I am going to do for making a living. It gave me a sense of creativity and it was a great feeling to see my code work (for the first time). It gave me a sense of happiness. I felt emotionally attached to code. After completing my matriculation I decided to go for a Diploma in Computer Science instead of conventional higher secondary education, as Maths, Physics and Chemistry failed to excite me much, and there was no point in continuing them ( which I regretted later as my interest aroused in <strong>Game Development</strong> which heavily relied on Maths and Physics)</p>

<p>This was end of my schooling and then I continued my education by joining Diploma in Computer Science.</p>

<p>To be continued</p>
]]></content>
  </entry>
  
</feed>
