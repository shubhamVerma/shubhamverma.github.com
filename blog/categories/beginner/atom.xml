<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: beginner | A Geek's Life]]></title>
  <link href="http://shubhamverma.github.io/blog/categories/beginner/atom.xml" rel="self"/>
  <link href="http://shubhamverma.github.io/"/>
  <updated>2014-11-03T13:38:44+00:00</updated>
  <id>http://shubhamverma.github.io/</id>
  <author>
    <name><![CDATA[Shubham Verma]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Journey with Programming Languages - Part 2]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/02/20/journey-with-programming-languages-part-2/"/>
    <updated>2014-02-20T12:34:53+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/02/20/journey-with-programming-languages-part-2</id>
    <content type="html"><![CDATA[<h3>The Diploma</h3>

<p><a href="http://en.wikipedia.org/wiki/C_language">C</a> was my first friend in diploma. It was a fresh beginning from the basics of programming. The books I referred at that time were <strong>Let Us C</strong>, <strong>How To Program - C Edition</strong>. C is an important language when it comes to both programming and understanding how low level stuff, like memory, works, as most of the things has to be taken care by the programmer himself. I was scared by <strong>pointers</strong> initially, but gradually overcame by trial and error method (what most programmers often do). I used Turbo C, but switched to <a href="http://www.bloodshed.net/devcpp.html">Dev-C++</a>. On the way I also tried <a href="http://www.codeblocks.org/">Code Blocks</a>.</p>

<p>In the beginning, it gets bit difficult to decide which is the <strong>appropriate tool for the job</strong>, but the ultimate choice is what suits you the best.</p>

<p>I learned about <strong>random numbers</strong> and created fun games for number guessing etc. I am glad that I learnt C, as it helped me in building a <strong>good foundation and a sound programming perspective</strong>.</p>

<p>Then I came across <a href="http://en.wikipedia.org/wiki/C%2B%2B">C++</a>. This time I read about OOPs properly. It felt very similar to C and later I realized that it was a superset of C. The new stuff was <strong>classes</strong>, <strong>objects</strong>, <strong>templates</strong> etc. I didn&rsquo;t look much into the <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">STL</a> (which I should have done!), but I liked the concept of templates, as they were great for <strong>abstraction</strong> and <strong>generalization</strong> of code. The books that I referred to for C++ were <strong>C++ for Artists</strong>, <strong>How To Program - C++ Edition</strong>, and <strong>Thinking in C++</strong>.</p>

<p>I just love abstraction. <strong>Learning to think abstractly also leads to a better life</strong> (as it is all about ignoring unnecessary stuff).</p>

<p>Next one was <a href="http://en.wikipedia.org/wiki/SQL">SQL</a>. It is actually more of a <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> rather than a programming language. And that means you only need to specify <strong>what you want instead of how you want</strong>. The <strong>query engine</strong> handles all that complex stuff. It is easy to learn but it also got complicated with stuff like <strong>database specific implementations</strong> of SQL, <strong>sub-queries</strong> etc.</p>

<p>SQL is relevant for <a href="http://en.wikipedia.org/wiki/RDBMS">RDBMS</a>. I was also introduced to <a href="http://en.wikipedia.org/wiki/Entity_relationship">Entity-Relationship model</a> along with that. It is a nice and effective tool for <strong>high level design of the database</strong>, again providing <strong>abstraction</strong>. For some hands-on SQL, I preferred to use <a href="http://en.wikipedia.org/wiki/SQLite">SQLite</a>, as it didn&rsquo;t need a server and used simple files as the database. For executing queries and connecting to the database, I used <a href="http://www.softpedia.com/get/Internet/Servers/Database-Utils/Database-NET.shtml">Database .NET</a>. Its a freeware and fine for practicing.</p>

<p>To be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey with Programming Languages - Part 1]]></title>
    <link href="http://shubhamverma.github.io/blog/2014/01/24/journey-with-programming-languages-part-1/"/>
    <updated>2014-01-24T12:27:24+00:00</updated>
    <id>http://shubhamverma.github.io/blog/2014/01/24/journey-with-programming-languages-part-1</id>
    <content type="html"><![CDATA[<h3>The School</h3>

<p>I first saw a PC at a relative’s house, on which I just played <strong>NES</strong> ( the Nintendo Entertainment System ) like games.</p>

<p>My first PC was Intel Pentium III, 800 MHz CPU, 256 MB RAM, but it was good enough to play the original <strong>GTA Vice City</strong>.</p>

<p>My first encounter with programming was with <a href="http://en.wikipedia.org/wiki/Logo_%28programming_language%29">MS Logo</a> as part of my school curriculum. I can’t exactly remember which grade I was in at that time. It used simple commands to draw lines, shapes and patterns. It was an awesome first time experience. I used to try various commands trying to build spider-web like patterns.</p>

<p>Then I got introduced to <a href="http://en.wikipedia.org/wiki/Html">HTML</a>, the language of Web, as it was also a part of my school curriculum. It gave me a sense of working with something that’s really being used heavily out there. It was fun to make awfully looking colorful pages and link them with each other.</p>

<p>In my final grade, we had <a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29">Java</a>. It felt a lot more related to programming than HTML (I think everybody agrees with that). With that came stuff like <strong>Object Oriented Programming</strong>, classes, object etc. I was able to understand the basics of programming like variables, types, conditionals etc. but was not pretty clear with the whole Object-Oriented stuff and why things were supposed to be done in that way. I learned the definitions but failed to grasp the true meaning, may be due to my small age and lack of abstract thinking.</p>

<p>That was the time I decided that this is the thing I am going to do for making a living. It gave me a sense of creativity and it was a great feeling to see my code work (for the first time). It gave me a sense of happiness. I felt emotionally attached to code. After completing my matriculation I decided to go for a Diploma in Computer Science instead of conventional higher secondary education, as Maths, Physics and Chemistry failed to excite me much, and there was no point in continuing them ( which I regretted later as my interest aroused in <strong>Game Development</strong> which heavily relied on Maths and Physics)</p>

<p>This was end of my schooling and then I continued my education by joining Diploma in Computer Science.</p>

<p>To be continued</p>
]]></content>
  </entry>
  
</feed>
